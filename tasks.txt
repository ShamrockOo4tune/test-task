Тестовое задание.
    1. Установить систему виртуализации (VirtualBox или аналог).
    2. Создать виртуальную машину c именем SRV01 (далее – ВМ или SRV01), развернуть на ней (для примера, можно ОС CentOS 7, или аналог). Для ВМ создать сетевой интерфейс внутренней сети (виртуальный адаптер хоста).
    3. Создать виртуальную машину c именем DHCP01 (далее DHCP01), развернуть на ней (для примера, можно ОС CentOS 7, или аналог). Для ВМ создать два сетевых интерфейса - внутренней сети (виртуальный адаптер хоста) и NAT. Убедится, что система виртуализации сконфигурирована с собственным dhcp сервером.
Работа с Ansible. Развертывание и конфигурирования системы управления конфигурациями Ansible (на SRV01, DHCP01)
Каждый результирующий пункт документировать скриншотами с результатами выполнения пункта.
    1. Установить систему управления конфигурациями Ansible (на DHCP01);
    2. Создать каталог /ansible для двух следующих проектов (роль «Установка программного обеспечения» и роль «Конфигурирование целевого сервера») 
    3. Выполнить создание заготовок ролей в Ansible (на DHCP01) (/ansible/install_software и /ansible/configure_server соотвественно);
    4. Изменить конфигурацию Ansible, включить логирование в Ansible (настроить запись выполняемых запусков плейбуков в файл лога) (на DHCP01).
Работа с Ansible. Разработка роли «Установка программного обеспечения» (на SRV01, DHCP01) (/ansible/install_software)
Результат работы документировать файлом лога с журналом хода выполнения роли и файлом листинга роли.
ВНИМАНИЕ. Для выполнения задач на сервере SRV01 необходимо добавить сетевой интерфейс NAT 
    1. Разработать роль, которая на конечном сервере производит установку сервиса Apache.
    2. Роль включает в себя следующие задачи (tasks), выполняемые последовательно: 
        a. Подключение репозитория на конечном сервере;
        b. Установка Apache из пакетов;
        c. Выполнение незамедлительно перезагрузки системы;
        d. Удаление сервиса Apache из автозагрузки системы;
        e. Выполнение отложенной перезагрузки системы;
        f. Выполнение команды по отображению состояния сервиса Apache;
        g. Добавление сервиса Apache в автозагрузку системы;
        h. Отключение сервиса Apache;
        i. Выполнение команды по отображению состояния сервиса Apache;
        j. Включение сервиса Apache;
        k. Выполнение незамедлительно перезагрузки системы;
        l. Выполнение команды по отображению списка файлов в каталоге, где расположен основной файл конфигурации Apache.
    3. Каждый пункт должен быть реализован отдельной задачей в одном плейбуке, установку выполнить на группе серверов, указанных в файле инвентаризации.
    4. В группе серверов (предназначенные для развертывания роли на конечных серверах), указанных в файле инвентаризации, добавляется 1 сервер - SRV01.
Работа с Ansible. Разработка роли «Конфигурирование целевого сервера» (/ansible/configure_server)
Результат работы документировать файлом лога с журналом хода выполнения роли и файлом листинга роли.
    1. Разработать роль, которая на конечном сервере производит конфигурирование конечного сервера.
    2. Роль включает в себя следующие задачи (tasks), выполняемые последовательно: 
        a. Создание 3-х локальных учетных записей пользователей, пользователи создаются каждый отдельной задачей;
        b. Создание каталога /test_copy, в корне;
        c. Копирование текстового файла в созданный выше каталог, с сервера Ansible на целевой сервер. Использовать в качестве объекта копирования предварительно созданный текстовый файл-шаблон Jinja2;
        d. Копирование полученного текстового файла на конечном сервере в каталог /opt c переименованием его имени в формате «имя_созданного_файла_01.txt»
        e. Добавление прав на чтение на файл, сделать владельцем соответствующего пользователя;
        f. Изменение имя виртуальной машины (hostname), примерный формат имени s-test-01;
        g. Удаление сервиса Apache из автозагрузки системы;
        h. Копирование конфигурационного файла SSH в каталог /opt;
        i. Переименование скопированного конфигурационного файла SSH, примерный формат имени ssh_test_config;
        j. В конфигурационном файле SSH произвести комментирование строки «PermitRootLogin yes»;
        k. В конфигурационном файле SSH изменить параметр PermitRootLogin с «yes», на «no»;
        l. В случае отсутствия строки «PermitRootLogin yes», произвести ее создание в конце файла.
    3. Каждый пункт должен быть реализован отдельной задачей в одном плейбуке, установку выполнить на группе серверов, указанных в файле инвентаризации.
    4. В группе серверов (предназначенные для развертывания роли на конечных серверах), указанных в файле инвентаризации, добавляется 1 сервер - SRV01.

Работа с Terraform. Развертывание объектов в облаке yandex cloud
    1. Разработать набор terraform планов для развертывания объектов в облаке yandex cloud.
    2. Отдельный terraform план для развертывания подсети. CIDR и имя подсети должны быть оформлены как входные параметры, остальные параметры можно по усмотрению задать статически.
    3. Отдельный terraform план для развертывания виртуальной машины. Имя ВМ, ОС должны быть оформлены как входные параметры, ВМ должна быть подключена к подсети, созданной предыдущим terraform планом, остальные параметры можно по усмотрению задать статически.
    4. На виртуальной машине должен быть поднять любой по желанию веб сервер.
    5. Результатом всего процесс должен быть получен url на страницу заглушку развернутого веб сервера.
Примечание: новым клиентам Yandex Cloud доступен стартовый грант в размере 4000 рублей, которого должно быть достаточно для выполнения тестового задания. Подробности по ссылке.
Проектирование архитектуры системы (бонусное). Система автоматизации и управления инфраструктурой Linux серверов
Результат работы документировать файлом описания предлагаемого способа решения задачи
Исходные данные:
    1. Инфраструктура частного облака, автоматизирующая создание виртуальных машин (пусть будет на VMWare)
    2. Существует Тест и Прод. В сумме порядка 4000 ВМ под управлением ОС Linux (зоопарк), 1000 в проде, 3000 в тесте.
    3. Вся инфраструктура логически разделена на Сервисы. (сервис – группа ВМ, на которых функционирует необходимое платформенное и прикладное ПО для работы какой-либо ИТ или Бизнес системы. К примеру, 2 ВМ с СУБД PostgreSQL в кластере, кластер веб серверов, кластер балансировщиков haproxy, и тому подобное).  Количество сервисов 100.
    4. Каждый сервис обслуживается одним или несколькими ответственными системными администраторами сервиса (далее СА). Присутствует ролевая модель, группа СА имеет доступ только к своим серверам. Количество СА суммарно более 100. 
Задача:
    1. Необходимо спроектировать систему, которая позволит автоматизировать процесс распространения обновлений ОС Linux и ПО.
        a. Подготовить перечень ПО, которое планируется, предлагается использовать
        b. Подготовить краткое описание процесса развертывания/доставки для тестирования в тестовой среде, распространения протестированного обновления на прод сервер.
Ограничения:
    1. Тест предназначен для тестирования😊. Следовательно, на прод серверы не должно ни при каких обстоятельствах попасть/установиться не протестированное на тестовом сервере обновление.

Дополнительная информация:

    1. Допускается к использованию любое ПО, желательно opensource.
    2. Репозиторий (артифактори, хранилище пакетов) реплицирует пакеты обновлений ОС и ПО с публичными репозиториями ОС Linux и хранит локально. Глубина хранения версий пакетов не ограничена.
    3. При проработке решения необходимо учесть ролевую модель и зоны ответственности СА/команд за сервисы

